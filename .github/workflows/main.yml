name: Deploy TrialApp

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: trumphack/trialapp-backend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: trumphack/trialapp-frontend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            NODE_ENV=production
            CI=true

      - name: Build and push nginx
        uses: docker/build-push-action@v4
        with:
          context: ./gateway
          push: true
          tags: trumphack/trialapp-gateway:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Copy docker-compose and env files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.USER_PASSWORD }}
          port: 22
          source: "docker-compose.production.yml,.env"
          target: "trialapp"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.USER_PASSWORD }}
          port: 22
          script: |
            cd trialapp
            echo "Stopping containers..."
            docker compose -f docker-compose.production.yml down

            echo "Pulling new images..."
            docker compose -f docker-compose.production.yml pull

            echo "Starting services..."
            docker compose -f docker-compose.production.yml up -d db
            
            # Ждем запуска базы и создаем пользователя
            sleep 5
            docker compose -f docker-compose.production.yml exec -T db psql -U postgres -c "CREATE USER django_user WITH PASSWORD 'mysecretpassword';"
            docker compose -f docker-compose.production.yml exec -T db psql -U postgres -c "CREATE DATABASE django OWNER django_user;"

            echo "Starting remaining services..."
            docker compose -f docker-compose.production.yml up -d

            echo "Checking backend health..."
            for i in {1..30}; do
              if curl -s http://localhost:8000/api/health-check | grep -q "healthy"; then
                echo "Backend is healthy"
                exit 0
              fi
              echo "Waiting for backend... ($i/30)"
              sleep 2
            done

            echo "Backend health check failed"
            docker compose -f docker-compose.production.yml logs
            exit 1
